job "${job_name}" {
  datacenters = ["${datacenter_name}"]
  type        = "service"
  namespace   = "${namespace}"

  group "dns" {

    volume "tailscaled" {
      type      = "host"
      read_only = false
      source    = "${volume_id}"
    }

    task "tailscale" {
      driver = "docker"

      volume_mount {
        volume = "tailscaled"
        destination = "/var/lib/tailscale"
      }

      lifecycle {
        hook = "poststart"
        sidecar = true
      }

      config {
        image = "tailscale/tailscale:${tailscale_version}"
      }

      template {
        data = <<-EOH
        TS_AUTHKEY="{{ with nomadVar "nomad/jobs/${job_name}" }}{{ .tailscale_authkey }}{{ end }}?ephemeral=false&preauthorized=true"
        TS_AUTH_ONCE="true"
        TS_STATE_DIR=/var/lib/tailscale
        TS_USERSPACE="true"
        TS_HOSTNAME="{{ env "NOMAD_GROUP_NAME" }}"
        TS_ROUTES="{{ env "NOMAD_ALLOC_IP_dns" }}/32"
        TS_EXTRA_ARGS=--advertise-tags=tag:${tailscale_device_tag}
        EOH
        destination = "secrets/file.env"
        env         = true
      }
    }

    task "ansible" {
      driver = "docker"

      lifecycle {
        hook    = "poststart"
        sidecar = false
      }

      config {
        image = "alpine/ansible:latest"
        command = "ansible-playbook"
        args  = ["secrets/playbook.yaml"]
      }

      template {
        data        = <<-EOF
${split_dns_vars}
EOF
        destination = "secrets/vars.yaml"
      }

      template {
        data            = <<-EOF
${split_dns_provisioner}
EOF
        destination     = "secrets/playbook.yaml"
        left_delimiter  = "<<"
        right_delimiter = ">>"
      }
    }

    task "bind" {
      driver = "docker"

      config {
        image = "internetsystemsconsortium/bind9:${bind_version}"
        ports = ["dns"]
        args = ["-g", "-c", "/etc/bind/named.conf", "-u", "bind"]

        mount {
          type = "bind"
          source = "local/config/named.conf"
          target = "/etc/bind/named.conf"
        }

        %{ for zone in zones ~}mount {
          type     = "bind"
          source   = "local/config/${zone}.zone"
          target   = "/var/lib/bind/${zone}.zone"
          readonly = false
        }

        %{ endfor ~}
}
      %{ for zone in zone_files ~}template {
        data = <<EOF
${zone.content}
EOF
      destination = "$${NOMAD_TASK_DIR}/config/${zone.name}.zone"
      }

      %{ endfor ~}

      template {
        data = <<EOF
${secret_key}
EOF
        destination = "$${NOMAD_SECRETS_DIR}/named.conf.key"
      }

      template {
        data = <<EOF
${config}
EOF
        destination = "$${NOMAD_TASK_DIR}/config/named.conf"
      }

      resources {
        cpu    = ${resources.cpu}
        memory = ${resources.memory}
      }

    }

    network {
      mode = "bridge"
      port "dns" {
        to = 53
      }
    }
  }
}
