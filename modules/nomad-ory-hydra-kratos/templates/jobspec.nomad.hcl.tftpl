job "${job_name}" {
  datacenters = ["${datacenter_name}"]
  type        = "service"

  group "hydra" {
    network {
      port "hydra-public" {
        to = 4444
      }
      port "hydra-admin" {
        to = 4445
      }
    }
    service {
      name     = "hydra-public"
      provider = "nomad"
      port     = "hydra-public"
      tags     = [
        "traefik.enable=true",
        "traefik.http.routers.hydra-public.rule=Host(`${hydra_public_fqdn}`)",
        "traefik.http.routers.hydra-public.entrypoints=http"
      ]
    }
    service {
      name     = "hydra-admin"
      provider = "nomad"
      port     = "hydra-admin"
    }
    task "hydra-migrate" {
      lifecycle {
        hook    = "prestart"
        sidecar = false
      }

      driver = "docker"

      template {
        change_mode = "restart"
        data        = <<-EOF
        ${hydra_config}
        EOF
        destination = "local/hydra.yml"
      }

      template {
        change_mode = "restart"
        data        = <<-EOF
        DSN=postgres://hydra:${urlencode(hydra_db_password)}@{{ range service "postgres" }}{{ .Address }}:{{ .Port }}{{ end }}/hydra?sslmode=disable&max_conns=20&max_idle_conns=4
        EOF
        destination = "secrets/kratos.env"
        env         = true
      }

      config {
        image   = "oryd/hydra:${hydra_version}"
        command = "migrate"
        args = [
          "-c",
          "/etc/config/hydra/hydra.yml",
          "sql",
          "-e",
          "--yes"
        ]

        mount {
          type   = "bind"
          source = "local/hydra.yml"
          target = "/etc/config/hydra/hydra.yml"
        }
      }
    }
    task "hydra" {
      driver = "docker"

      template {
        change_mode = "restart"
        data        = <<EOF
${hydra_config}
        EOF
        destination = "local/hydra.yml"
      }

      template {
        change_mode = "restart"
        data        = <<-EOF
        DSN=postgres://hydra:${urlencode(hydra_db_password)}@{{ range service "postgres" }}{{ .Address }}:{{ .Port }}{{ end }}/hydra?sslmode=disable&max_conns=20&max_idle_conns=4
        EOF
        destination = "secrets/kratos.env"
        env         = true
      }

      config {
        image = "oryd/hydra:${hydra_version}"

        args = [
          "serve",
          "-c",
          "/etc/config/hydra/hydra.yml",
          "all"
        ]

        mount {
          type   = "bind"
          source = "local/hydra.yml"
          target = "/etc/config/hydra/hydra.yml"
        }

        ports = ["hydra-public", "hydra-admin"]
      }
    }
  }

  group "kratos" {
    network {
      port "kratos-public" {
        to = 4433
      }
      port "kratos-admin" {
        to = 4434
      }
    }

    service {
      name     = "kratos-public"
      provider = "nomad"
      port     = "kratos-public"
      tags     = [
        "traefik.enable=true",
        "traefik.http.routers.kratos-public.rule=Host(`${kratos_public_fqdn}`)",
        "traefik.http.routers.kratos-public.entrypoints=http"
      ]
    }

    service {
      name     = "kratos-admin"
      provider = "nomad"
      port     = "kratos-admin"
    }

    task "kratos-migrate" {
      lifecycle {
        hook    = "prestart"
        sidecar = false
      }

      template {
        change_mode = "restart"
        data        = <<EOF
${kratos_config}
        EOF
        destination = "local/kratos.yml"
      }

      template {
        change_mode = "restart"
        data        = <<-EOF
        DSN=postgres://kratos:${urlencode(kratos_db_password)}@{{ range service "postgres" }}{{ .Address }}:{{ .Port }}{{ end }}/kratos?sslmode=disable&max_conns=20&max_idle_conns=4
        EOF
        destination = "secrets/kratos.env"
        env         = true
      }

      driver = "docker"

      config {
        image = "oryd/kratos:${kratos_version}"
        // command = "migrate"
        args = [
          "-c",
          "/etc/config/kratos/kratos.yml",
          "migrate",
          "sql",
          "-e",
          "--yes",
        ]

        mount {
          type   = "bind"
          source = "local/kratos.yml"
          target = "/etc/config/kratos/kratos.yml"
        }
      }
    }
    task "kratos" {
      driver = "docker"

      template {
        change_mode = "restart"
        data        = <<EOF
${kratos_config}
        EOF
        destination = "local/kratos.yml"
      }

      template {
        change_mode = "restart"
        data        = <<-EOF
        DSN=postgres://kratos:${urlencode(kratos_db_password)}@{{ range service "postgres" }}{{ .Address }}:{{ .Port }}{{ end }}/kratos?sslmode=disable&max_conns=20&max_idle_conns=4
        EOF
        destination = "secrets/kratos.env"
        env         = true
      }

      config {
        image = "oryd/kratos:${kratos_version}"

        args = [
          "serve",
          "-c",
          "/etc/config/kratos/kratos.yml"
        ]

        mount {
          type   = "bind"
          source = "local/kratos.yml"
          target = "/etc/config/kratos/kratos.yml"
        }

        ports = ["kratos-public", "kratos-admin"]
      }
    }
  }
}