name: "Publish terraform modules to registry"

on:
  push:
    paths:
      - modules/**/*
  workflow_dispatch:

jobs:
  dispatch:
    runs-on: ubuntu-latest
    name: Dispatch subsequent publish jobs for changed modules
    defaults:
      run:
        working-directory: modules
    outputs:
      modules: ${{ steps.reduce.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Gather file changes info
        id: changed
        run: |
          echo "files=$(git diff --name-only HEAD HEAD^)" >> "$GITHUB_OUTPUT"
          echo "directories=$(ls -d)" >> "$GITHUB_OUTPUT"

      - name: Reduce file changes to modules to publish
        uses: actions/github-script@v7
        id: reduce
        with:
          result-encoding: string
          script: |
            const files = "${{ steps.changed.outputs.files }}".split('\n');
            const moduleDirectories = "${{ steps.changed.outputs.directories }}".split('\n');
            const changedModules = moduleDirectories.filter(moduleDirectory => files.some(file => file.startsWith(moduleDirectory))
            return changedModules;
  publish:
    runs-on: ubuntu-latest
    name: Publish changed modules
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.dispatch.outputs.modules) }}
    defaults:
      run:
        working-directory: modules/${{ matrix.module }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -diff -check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Archive module
        id: archive
        run: |
          tar -czf "${{ matrix.module }}.tar.gz" .

      - name: Publish module
        id: publish
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const module = "${{ matrix.module }}";
            const moduleTarball = fs.readFileSync(`${module}.tar.gz`);

            const metadataRequest = await fetch('https://registry.narwhl.workers.dev/v1/metadata');
            const metadata = await metadataRequest.json();
            const moduleSource = 'https://github.com/narwhl/blueprint/tree/main/modules/{{ matrix.module }}';
            var moduleSelector = '{{ github.repository_owner }}/{{ github.event.repository.name }}/{{ matrix.module }}';
            if (!metadata[moduleSource]) {
              const createModuleResponse = await fetch('https://registry.narwhl.workers.dev/v1/modules', {
                method: 'POST',
                body: JSON.stringify({
                  name: '{{ github.event.repository.name }}',
                  namespace: '{{ github.repository_owner }}',
                  provider: '{{ matrix.module }}',
                  description: '{{ matrix.module }}',
                  owner: '{{ github.repository_owner }}',
                  source: moduleSource,
                }),
              });
              if (!createModuleResponse.ok) {
                throw new Error(`Failed to create module ${module} in registry: ${createModuleResponse.status} ${createModuleResponse.statusText}`);
              }
              console.log(`Module ${module} created in registry, using selector ${moduleSelector}`);
            } else {
              moduleSelector = metadata[moduleSource];
              console.log(`Module ${module} already exists in registry, using selector ${moduleSelector}`);
            }

            const data = new FormData();
            data.append('module', moduleTarball, `${module}.tar.gz`);

            const publishModuleResponse = await fetch('https://registry.narwhl.workers.dev/v1/modules/${moduleSelector}/versions', {
              method: 'POST',
              body: data,
            });
            if (!publishModuleResponse.ok) {
              throw new Error(`Failed to publish module ${module} to registry: ${publishModuleResponse.status} ${publishModuleResponse.statusText}`);
            }
            console.log(`Module ${module} published to registry`);
